/*
 * SMF PDU Session
 *
 * SMF PDU Session Service
 *
 * API version: 1.PreR15.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package main

import (
	"bytes"
	"fmt"
	"github.com/jerryduren/5gc/model"
	"github.com/jerryduren/5gc/nfframe/nfclient"
	"golang.org/x/net/context"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strings"
	"time"
)

func NewSMContextCreatedBody()model.SmContextCreateBody{
	body:=model.SmContextCreateBody{}
	body.JsonData.ServingNfId = "SMFID"
	body.JsonData.Supi = "46000123456789"
	body.JsonData.AnType = "3GPP_ACCESS"
	body.BinaryDataN1SmMessage = []byte{48,49,50,51}
	
	return body
}

func main() {

	client := nfclient.NewAPIClient()
	client.ChangeBasePath("http://localhost:8080/nsmf-pdusession/v1")
	// client.AddDefaultHeader("Content-Type","application/json")
	body1, rsp, err := client.SMContextsCollectionApi.PostSmContexts(context.Background(), NewSMContextCreatedBody())
	if err != nil {
		log.Fatalln(err)
	} else {
		fmt.Println(body1)
	}

	defer rsp.Body.Close()
	
	MyPostRequest("http://localhost:8080/nsmf-pdusession/v1","application/related")
}


func MyPostRequest(url string, ctxType string){
	body:=bytes.NewBuffer([]byte{})
	body.WriteString("This is my Post Request for "+url)
	resp, err := http.Post(url, ctxType, body)
	if err!=nil{
		log.Fatalln(err)
		return
	}
	
	PrintResponse(resp)
}

func PrintResponse (resp *http.Response){
	fmt.Println("\nI receive a Response Message.\n\r")
	
	defer resp.Body.Close()
	
	fmt.Println(resp.Proto,resp.Status)
	
	for k,v:=range resp.Header{
		fmt.Println(k,":",v)
	}
	
	fmt.Println("")								// 頭和躰之間必須有一個空行
	rspBody,err:=ioutil.ReadAll(resp.Body)
	if err!=nil{
		log.Fatalln(err)
		os.Exit(1)
	}
	if strings.Contains(resp.Header.Get("Content-Type"),"text"){
		fmt.Printf("%s\n\r",rspBody)
		/*
		b:=bytes.NewBuffer([]byte)
		bufio.NewReader(rspBody)
		b.ReadFrom(rspBody)
		rspBody.
		*/
	}else{
		fmt.Println(rspBody)
	}
	
	// Parse time
	genTime,err:=http.ParseTime(resp.Header.Get("Date"))
	if err!=nil{
		log.Fatal(err)
	}else {
		fmt.Println("Escape Time:",time.Since(genTime))
		
	}
}
