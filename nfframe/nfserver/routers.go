/*
 * SMF PDU Session
 *
 * SMF PDU Session Service
 *
 * API version: 1.PreR15.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nfserver

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string           // 操作名稱
	Method      string           // 定義方法，如GET,Post,Delete,Patch等等
	Pattern     string           // 定義匹配相對路徑
	HandlerFunc http.HandlerFunc // 本次操作的處理函數
}

type Routes []Route

// 注冊路由表，注冊每種方法，路徑，對應的處理函數
var routes = Routes{
	{
		// Server的根，任何沒有找到匹配Handler的請求都會匹配到這
		"Default Handler",
		"GET",
		"/",
		DefaultHandler,
	},
	
	{
		// API的根
		"API Root",
		"GET",
		"/nsmf-pdusession/v1/",			// 注意最後面的/，如果沒有是精確匹配，如果有是最長匹配
		ApiRoot,
	},

	{
		// 注冊opeanAPI定義的路徑，操作的處理函數
		// 注意Pattern路徑是指的http://www.huawei.com:808之後的路徑，可以帶參數
		// 注意這個路徑與openAPI裏面path下面的路徑的差異
		"Create SM Context",               // 對應openAPI裏面的summary
		strings.ToUpper("Post"),           // 對應openAPI裏面的method
		"/nsmf-pdusession/v1/sm-contexts", // 對應servers.url結合path裏面的内容得到
		PostSmContexts,                    // 對應openAPI裏面的operatinID
	},

	/*
	{
		"Retrieve SM Context",
		strings.ToUpper("Post"),
		"/nsmf-pdusession/v1/sm-contexts/{smContextRef}/retrieve",
		RetrieveSmContext,
	},
	*/
}

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}